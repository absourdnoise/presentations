Concurrency 
How it runs and where to Go
20 Jul 2016
Tags: concurrency, scheduler, memmory model, lock-free

Andrew Pogrebnoy
Technical Lead, Admobitec Ltd.
andrew@admobitec.com
https://github.com/absourdnoise


* Concurrency is not parallelism

.image img/gofertines.jpg 280 680
.image img/parallelism.jpg 200 600

# Parallelism it's a simoultenisly execution of any computations
# Concurrency independently execution of processes. And the way to compose it.
# Concurrency is about organisation, but parallelism - execution.

* The roots

- Context switching

Kernel switches the CPU attention between processes.
Has huge overhead, because of need to storeing/restoreing all the CPU registers for processes. Switches unpredictable (can occur at any point in a execuution).
# TLB cache
# Overhead of the operating system context switch, and the overhead of the scheduler function to choose the next process to occupy the CPU

- Threads

Threads are the same processes but share common memmory space. Easier to switches between. But still expencive.
.image img/stack.png 250 _

* Goroutines

Cooperatively scheduled by runtime. Cheap to create and manage. Runtime switches between at well defined points. Unlike OS, that can switch threads at any time. 

.image img/gstack.png

Goroutine starts with 2k stack on heap. Compiler inserts checks in every function call. And if there are not enough free space, it allocates new segment, and moves contents there.
So it can starts with small stack. Wich in turn can even be shrinked by GC.

* Scheduler
# On each M (OS thread) thre is special gouroutine - `g0` that keeps the borders of thread stack in own stack.

* SCP

Communicating Sequential Processes

* Go memory model

* Synchronization

- Channels
  - Channels overhead
  - When should we use the channels and when the mutexes:
  - https://github.com/golang/go/wiki/MutexOrChannel
- Mutex
- Lock-free (sync/atomic)
- Benchmarks vs channels vs mutexes vs atomic (on metrics)

* Race condition

- `-race`
- map reading race in go1.6

* GC
- Concurrent GC
- TOC proposal

* Links
- https://talks.golang.org/2012/waza.slide
- http://dave.cheney.net/2015/08/08/performance-without-the-event-loop
- Scalable Go Scheduler https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit
