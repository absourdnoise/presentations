SSA
And slight dip into new backend for the Go compiler
28 Sep 2016
Tags: ssa, ir, compiler, cfg

Andrew Pogrebnoy
andrew@admobitec.com
https://github.com/dAdAbird
Slides: [[https://goo.gl/SrToLy][https://goo.gl/SrToLy]]


* Brief history of compiler

- Originally written in C.
- In Go version 1.5 was translated from C to Go. There are few reasons:
    - Write barriers for concurrent GC.
    - Contiguous stacks support.
    - Community.
- In Go 1.7 a new SSA backend (only for amd64).
- Currently (on tip) the other archs was moved to the new SSA backed. And the old gc is ripping out. Commit: [[https://github.com/golang/go/commit/167e381f405d36f71ef152e45bb845b866592c80][cmd/compile: make ssa compilation unconditional]].

* Compiler
1. Lexical analysis, parsing.
2. AST building.
3. Types checking etc (semantic analysis).
4. Intermediate representation (IR).
5. Optimizations.
7. IR → Opcodes → object file (code generation).
8. ???
9. PROFIT

* What is an SSA
- Static Single Assignment. Is a form of IR which requires that each variable is assigned exactly once, and every variable is defined before it is used.
- Now used in GCC, HotSpot, LLVM etc.
-  Why not use LLVM or GCC as the backend for the Go compiler?
    - Compiler speed.  
    - Runtime information. The runtime needs accurate maps of stack frames for both GC and stack copying.
    - An additional dependence.

* SSA
Each variable is assigned exactly once. Code:
.code ssa-intr1.go /START OMIT/,/END OMIT/
In SSA form:
.code ssa-intr1.go /START2 OMIT/,/END2 OMIT/

* Control flow graph (CFG)
- An SSA notation is inextricably linked with the concept of Control Flow Graph (CFG).
- In a CFG each node in the graph represents a basic block, i.e. a straight-line piece of code without any jumps.
- Edges are used to represent control transfers (jumps).
- Control enters only at the beginning of basic block.
- Control leaves only at the end of the basic block.

* CFG
.image cfg1.png 500 _
.caption taken from: [[https://en.wikipedia.org/wiki/Dominator_(graph_theory)][Wikipedia]]

* Example
.code example.go /^func bytesEq/,/^}/

* bytesEq CFG
.image cfg-nophi.png 550 _

* φ (phi) function
.image cfg-phi.png 551 _

* Dominance
.image dom1.jpg

* Dominator, Dominance Frontier
.image dom2.png 500 _
.caption taken from: [[http://www.cs.colostate.edu/~mstrout/CS553Fall06/slides/lecture17-SSA.pdf][SSA Lectures]]
: - The immediate dominator or idom of a node n is the unique node that strictly dominates n but does not strictly dominate any other node that strictly dominates n. Every node, except the entry node, has an immediate dominator.
: - The dominance frontier of a node d is the set of all nodes n such that d dominates an immediate predecessor of n, but d does not strictly dominate n. It is the set of nodes where d's dominance stops.
: - A dominator tree is a tree where each node's children are those nodes it immediately dominates. Because the immediate dominator is unique, it is a tree. The start node is the root of the tree.

* SSA in Go
- The SSA backend compiles each function independently.
- The entities of the CFG represented as structures (Block, Value, Edge).
- `func buildssa(fn *Node) *ssa.Func` converts AST-based IR to the SSA-based IR (makes CFG and all the stuff) for the given "like-function" AST node and then compiles this function.
- Compile means modifies function so that on return:
   · all Values in f map to 0 or 1 assembly instructions of the target architecture;
   · the order of f.Blocks is the order to emit the Blocks;
   · the order of b.Values is the order to emit the Values in each Block;
   · f has a non-nil regAlloc field;
- SSA Compiler actually walks thru the "passes" some of each are required (e.g. scheduling, register allocation) and other not (e.g. common-subexpression and dead code elimination) and applies them to the function.

* SSA in Go
The SSA backend doesn't handle:

- Inlining.
- Escape analysis.

This is done on the previous stages.  

* Basic blocks:
.image block.png 500 _
.caption [[https://golang.org/src/cmd/compile/internal/ssa/block.go#L10][src/cmd/compile/internal/ssa/block.go]]

* Edges
.image edge.png 500 _
.caption [[https://golang.org/src/cmd/compile/internal/ssa/block.go#L79][src/cmd/compile/internal/ssa/block.go]]

* Value
.image value.png 500 _
.caption [[https://golang.org/src/cmd/compile/internal/ssa/value.go][src/cmd/compile/internal/ssa/value.go]]

* Func
.image func.png 500 _
.caption [[https://golang.org/src/cmd/compile/internal/ssa/func.go][src/cmd/compile/internal/ssa/func.go]]

* Example
    GOSSAFUNC=bytesEq go build example.go
    open ssa.html

* So what it gives
- Better optimizations on:
 - dead code elimination;
 - nil check elimination;
 - common-subexpression elimination (CSE);
 - bounds check elimination;
 - partial redundancy elimination;
 - register allocation;
 ...
- There are a lot of algorithms for SSA IR optimizations.
- It gives a faster code and more compact binaries.

* Improvements
.image ssabench.png 500 _
.caption comparing tip (on March 17) relative to go1.6 

# * Plans (TODO) for future releases

* Links
[[https://en.wikipedia.org/wiki/Static_single_assignment_form][SSA Wikipedia]]
[[https://docs.google.com/document/d/1szwabPJJc4J-igUZU4ZKprOrNRNJug2JPD8OYi3i1K0][SSA Proposal]]
[[https://golang.org/src/cmd/compile/internal/ssa/][SSA compiler sources]]
[[http://www.dcs.gla.ac.uk/~jsinger/ssa.html][SSA bibliography]]
[[http://pp.info.uni-karlsruhe.de/uploads/publikationen/braun13cc.pdf][Paper: Simple and Efficient Construction of Static Single Assignment Form]]